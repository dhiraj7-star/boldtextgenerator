import { FontStyle } from '../types/FontStyle';

// Unicode transformation functions
const toBold = (text: string): string => {
  const boldMap: { [key: string]: string } = {
    'A': 'ùêÄ', 'B': 'ùêÅ', 'C': 'ùêÇ', 'D': 'ùêÉ', 'E': 'ùêÑ', 'F': 'ùêÖ', 'G': 'ùêÜ', 'H': 'ùêá', 'I': 'ùêà', 'J': 'ùêâ',
    'K': 'ùêä', 'L': 'ùêã', 'M': 'ùêå', 'N': 'ùêç', 'O': 'ùêé', 'P': 'ùêè', 'Q': 'ùêê', 'R': 'ùêë', 'S': 'ùêí', 'T': 'ùêì',
    'U': 'ùêî', 'V': 'ùêï', 'W': 'ùêñ', 'X': 'ùêó', 'Y': 'ùêò', 'Z': 'ùêô',
    'a': 'ùêö', 'b': 'ùêõ', 'c': 'ùêú', 'd': 'ùêù', 'e': 'ùêû', 'f': 'ùêü', 'g': 'ùê†', 'h': 'ùê°', 'i': 'ùê¢', 'j': 'ùê£',
    'k': 'ùê§', 'l': 'ùê•', 'm': 'ùê¶', 'n': 'ùêß', 'o': 'ùê®', 'p': 'ùê©', 'q': 'ùê™', 'r': 'ùê´', 's': 'ùê¨', 't': 'ùê≠',
    'u': 'ùêÆ', 'v': 'ùêØ', 'w': 'ùê∞', 'x': 'ùê±', 'y': 'ùê≤', 'z': 'ùê≥'
  };
  return text.split('').map(char => boldMap[char] || char).join('');
};

const toItalic = (text: string): string => {
  const italicMap: { [key: string]: string } = {
    'A': 'ùê¥', 'B': 'ùêµ', 'C': 'ùê∂', 'D': 'ùê∑', 'E': 'ùê∏', 'F': 'ùêπ', 'G': 'ùê∫', 'H': 'ùêª', 'I': 'ùêº', 'J': 'ùêΩ',
    'K': 'ùêæ', 'L': 'ùêø', 'M': 'ùëÄ', 'N': 'ùëÅ', 'O': 'ùëÇ', 'P': 'ùëÉ', 'Q': 'ùëÑ', 'R': 'ùëÖ', 'S': 'ùëÜ', 'T': 'ùëá',
    'U': 'ùëà', 'V': 'ùëâ', 'W': 'ùëä', 'X': 'ùëã', 'Y': 'ùëå', 'Z': 'ùëç',
    'a': 'ùëé', 'b': 'ùëè', 'c': 'ùëê', 'd': 'ùëë', 'e': 'ùëí', 'f': 'ùëì', 'g': 'ùëî', 'h': '‚Ñé', 'i': 'ùëñ', 'j': 'ùëó',
    'k': 'ùëò', 'l': 'ùëô', 'm': 'ùëö', 'n': 'ùëõ', 'o': 'ùëú', 'p': 'ùëù', 'q': 'ùëû', 'r': 'ùëü', 's': 'ùë†', 't': 'ùë°',
    'u': 'ùë¢', 'v': 'ùë£', 'w': 'ùë§', 'x': 'ùë•', 'y': 'ùë¶', 'z': 'ùëß'
  };
  return text.split('').map(char => italicMap[char] || char).join('');
};

const toBoldItalic = (text: string): string => {
  const boldItalicMap: { [key: string]: string } = {
    'A': 'ùë®', 'B': 'ùë©', 'C': 'ùë™', 'D': 'ùë´', 'E': 'ùë¨', 'F': 'ùë≠', 'G': 'ùëÆ', 'H': 'ùëØ', 'I': 'ùë∞', 'J': 'ùë±',
    'K': 'ùë≤', 'L': 'ùë≥', 'M': 'ùë¥', 'N': 'ùëµ', 'O': 'ùë∂', 'P': 'ùë∑', 'Q': 'ùë∏', 'R': 'ùëπ', 'S': 'ùë∫', 'T': 'ùëª',
    'U': 'ùëº', 'V': 'ùëΩ', 'W': 'ùëæ', 'X': 'ùëø', 'Y': 'ùíÄ', 'Z': 'ùíÅ',
    'a': 'ùíÇ', 'b': 'ùíÉ', 'c': 'ùíÑ', 'd': 'ùíÖ', 'e': 'ùíÜ', 'f': 'ùíá', 'g': 'ùíà', 'h': 'ùíâ', 'i': 'ùíä', 'j': 'ùíã',
    'k': 'ùíå', 'l': 'ùíç', 'm': 'ùíé', 'n': 'ùíè', 'o': 'ùíê', 'p': 'ùíë', 'q': 'ùíí', 'r': 'ùíì', 's': 'ùíî', 't': 'ùíï',
    'u': 'ùíñ', 'v': 'ùíó', 'w': 'ùíò', 'x': 'ùíô', 'y': 'ùíö', 'z': 'ùíõ'
  };
  return text.split('').map(char => boldItalicMap[char] || char).join('');
};

const toScript = (text: string): string => {
  const scriptMap: { [key: string]: string } = {
    'A': 'ùíú', 'B': 'ùí∑', 'C': 'ùí∏', 'D': 'ùíπ', 'E': 'ùëí', 'F': 'ùíª', 'G': 'ùëî', 'H': 'ùíΩ', 'I': 'ùíæ', 'J': 'ùíø',
    'K': 'ùìÄ', 'L': 'ùìÅ', 'M': 'ùìÇ', 'N': 'ùìÉ', 'O': 'ùìÑ', 'P': 'ùìÖ', 'Q': 'ùìÜ', 'R': 'ùìá', 'S': 'ùìà', 'T': 'ùìâ',
    'U': 'ùìä', 'V': 'ùìã', 'W': 'ùìå', 'X': 'ùìç', 'Y': 'ùìé', 'Z': 'ùìè',
    'a': 'ùí∂', 'b': 'ùí∑', 'c': 'ùí∏', 'd': 'ùíπ', 'e': 'ùëí', 'f': 'ùíª', 'g': 'ùëî', 'h': 'ùíΩ', 'i': 'ùíæ', 'j': 'ùíø',
    'k': 'ùìÄ', 'l': 'ùìÅ', 'm': 'ùìÇ', 'n': 'ùìÉ', 'o': 'ùìÑ', 'p': 'ùìÖ', 'q': 'ùìÜ', 'r': 'ùìá', 's': 'ùìà', 't': 'ùìâ',
    'u': 'ùìä', 'v': 'ùìã', 'w': 'ùìå', 'x': 'ùìç', 'y': 'ùìé', 'z': 'ùìè'
  };
  return text.split('').map(char => scriptMap[char] || char).join('');
};

const toBoldScript = (text: string): string => {
  const boldScriptMap: { [key: string]: string } = {
    'A': 'ùìê', 'B': 'ùìë', 'C': 'ùìí', 'D': 'ùìì', 'E': 'ùìî', 'F': 'ùìï', 'G': 'ùìñ', 'H': 'ùìó', 'I': 'ùìò', 'J': 'ùìô',
    'K': 'ùìö', 'L': 'ùìõ', 'M': 'ùìú', 'N': 'ùìù', 'O': 'ùìû', 'P': 'ùìü', 'Q': 'ùì†', 'R': 'ùì°', 'S': 'ùì¢', 'T': 'ùì£',
    'U': 'ùì§', 'V': 'ùì•', 'W': 'ùì¶', 'X': 'ùìß', 'Y': 'ùì®', 'Z': 'ùì©',
    'a': 'ùì™', 'b': 'ùì´', 'c': 'ùì¨', 'd': 'ùì≠', 'e': 'ùìÆ', 'f': 'ùìØ', 'g': 'ùì∞', 'h': 'ùì±', 'i': 'ùì≤', 'j': 'ùì≥',
    'k': 'ùì¥', 'l': 'ùìµ', 'm': 'ùì∂', 'n': 'ùì∑', 'o': 'ùì∏', 'p': 'ùìπ', 'q': 'ùì∫', 'r': 'ùìª', 's': 'ùìº', 't': 'ùìΩ',
    'u': 'ùìæ', 'v': 'ùìø', 'w': 'ùîÄ', 'x': 'ùîÅ', 'y': 'ùîÇ', 'z': 'ùîÉ'
  };
  return text.split('').map(char => boldScriptMap[char] || char).join('');
};

const toFraktur = (text: string): string => {
  const frakturMap: { [key: string]: string } = {
    'A': 'ùîÑ', 'B': 'ùîÖ', 'C': '‚Ñ≠', 'D': 'ùîá', 'E': 'ùîà', 'F': 'ùîâ', 'G': 'ùîä', 'H': '‚Ñå', 'I': '‚Ñë', 'J': 'ùîç',
    'K': 'ùîé', 'L': 'ùîè', 'M': 'ùîê', 'N': 'ùîë', 'O': 'ùîí', 'P': 'ùîì', 'Q': 'ùîî', 'R': '‚Ñú', 'S': 'ùîñ', 'T': 'ùîó',
    'U': 'ùîò', 'V': 'ùîô', 'W': 'ùîö', 'X': 'ùîõ', 'Y': 'ùîú', 'Z': '‚Ñ®',
    'a': 'ùîû', 'b': 'ùîü', 'c': 'ùî†', 'd': 'ùî°', 'e': 'ùî¢', 'f': 'ùî£', 'g': 'ùî§', 'h': 'ùî•', 'i': 'ùî¶', 'j': 'ùîß',
    'k': 'ùî®', 'l': 'ùî©', 'm': 'ùî™', 'n': 'ùî´', 'o': 'ùî¨', 'p': 'ùî≠', 'q': 'ùîÆ', 'r': 'ùîØ', 's': 'ùî∞', 't': 'ùî±',
    'u': 'ùî≤', 'v': 'ùî≥', 'w': 'ùî¥', 'x': 'ùîµ', 'y': 'ùî∂', 'z': 'ùî∑'
  };
  return text.split('').map(char => frakturMap[char] || char).join('');
};

const toDoubleStruck = (text: string): string => {
  const doubleStruckMap: { [key: string]: string } = {
    'A': 'ùî∏', 'B': 'ùîπ', 'C': '‚ÑÇ', 'D': 'ùîª', 'E': 'ùîº', 'F': 'ùîΩ', 'G': 'ùîæ', 'H': '‚Ñç', 'I': 'ùïÄ', 'J': 'ùïÅ',
    'K': 'ùïÇ', 'L': 'ùïÉ', 'M': 'ùïÑ', 'N': '‚Ñï', 'O': 'ùïÜ', 'P': '‚Ñô', 'Q': '‚Ñö', 'R': '‚Ñù', 'S': 'ùïä', 'T': 'ùïã',
    'U': 'ùïå', 'V': 'ùïç', 'W': 'ùïé', 'X': 'ùïè', 'Y': 'ùïê', 'Z': '‚Ñ§',
    'a': 'ùïí', 'b': 'ùïì', 'c': 'ùïî', 'd': 'ùïï', 'e': 'ùïñ', 'f': 'ùïó', 'g': 'ùïò', 'h': 'ùïô', 'i': 'ùïö', 'j': 'ùïõ',
    'k': 'ùïú', 'l': 'ùïù', 'm': 'ùïû', 'n': 'ùïü', 'o': 'ùï†', 'p': 'ùï°', 'q': 'ùï¢', 'r': 'ùï£', 's': 'ùï§', 't': 'ùï•',
    'u': 'ùï¶', 'v': 'ùïß', 'w': 'ùï®', 'x': 'ùï©', 'y': 'ùï™', 'z': 'ùï´'
  };
  return text.split('').map(char => doubleStruckMap[char] || char).join('');
};

const toMonospace = (text: string): string => {
  const monospaceMap: { [key: string]: string } = {
    'A': 'ùô∞', 'B': 'ùô±', 'C': 'ùô≤', 'D': 'ùô≥', 'E': 'ùô¥', 'F': 'ùôµ', 'G': 'ùô∂', 'H': 'ùô∑', 'I': 'ùô∏', 'J': 'ùôπ',
    'K': 'ùô∫', 'L': 'ùôª', 'M': 'ùôº', 'N': 'ùôΩ', 'O': 'ùôæ', 'P': 'ùôø', 'Q': 'ùöÄ', 'R': 'ùöÅ', 'S': 'ùöÇ', 'T': 'ùöÉ',
    'U': 'ùöÑ', 'V': 'ùöÖ', 'W': 'ùöÜ', 'X': 'ùöá', 'Y': 'ùöà', 'Z': 'ùöâ',
    'a': 'ùöä', 'b': 'ùöã', 'c': 'ùöå', 'd': 'ùöç', 'e': 'ùöé', 'f': 'ùöè', 'g': 'ùöê', 'h': 'ùöë', 'i': 'ùöí', 'j': 'ùöì',
    'k': 'ùöî', 'l': 'ùöï', 'm': 'ùöñ', 'n': 'ùöó', 'o': 'ùöò', 'p': 'ùöô', 'q': 'ùöö', 'r': 'ùöõ', 's': 'ùöú', 't': 'ùöù',
    'u': 'ùöû', 'v': 'ùöü', 'w': 'ùö†', 'x': 'ùö°', 'y': 'ùö¢', 'z': 'ùö£'
  };
  return text.split('').map(char => monospaceMap[char] || char).join('');
};

const toSansSerifBold = (text: string): string => {
  const sansSerifBoldMap: { [key: string]: string } = {
    'A': 'ùóî', 'B': 'ùóï', 'C': 'ùóñ', 'D': 'ùóó', 'E': 'ùóò', 'F': 'ùóô', 'G': 'ùóö', 'H': 'ùóõ', 'I': 'ùóú', 'J': 'ùóù',
    'K': 'ùóû', 'L': 'ùóü', 'M': 'ùó†', 'N': 'ùó°', 'O': 'ùó¢', 'P': 'ùó£', 'Q': 'ùó§', 'R': 'ùó•', 'S': 'ùó¶', 'T': 'ùóß',
    'U': 'ùó®', 'V': 'ùó©', 'W': 'ùó™', 'X': 'ùó´', 'Y': 'ùó¨', 'Z': 'ùó≠',
    'a': 'ùóÆ', 'b': 'ùóØ', 'c': 'ùó∞', 'd': 'ùó±', 'e': 'ùó≤', 'f': 'ùó≥', 'g': 'ùó¥', 'h': 'ùóµ', 'i': 'ùó∂', 'j': 'ùó∑',
    'k': 'ùó∏', 'l': 'ùóπ', 'm': 'ùó∫', 'n': 'ùóª', 'o': 'ùóº', 'p': 'ùóΩ', 'q': 'ùóæ', 'r': 'ùóø', 's': 'ùòÄ', 't': 'ùòÅ',
    'u': 'ùòÇ', 'v': 'ùòÉ', 'w': 'ùòÑ', 'x': 'ùòÖ', 'y': 'ùòÜ', 'z': 'ùòá'
  };
  return text.split('').map(char => sansSerifBoldMap[char] || char).join('');
};

const toSmallCaps = (text: string): string => {
  const smallCapsMap: { [key: string]: string } = {
    'A': '·¥Ä', 'B': ' ô', 'C': '·¥Ñ', 'D': '·¥Ö', 'E': '·¥á', 'F': '“ì', 'G': '…¢', 'H': ' ú', 'I': '…™', 'J': '·¥ä',
    'K': '·¥ã', 'L': ' ü', 'M': '·¥ç', 'N': '…¥', 'O': '·¥è', 'P': '·¥ò', 'Q': '«´', 'R': ' Ä', 'S': '—ï', 'T': '·¥õ',
    'U': '·¥ú', 'V': '·¥†', 'W': '·¥°', 'X': '—Ö', 'Y': ' è', 'Z': '·¥¢',
    'a': '·¥Ä', 'b': ' ô', 'c': '·¥Ñ', 'd': '·¥Ö', 'e': '·¥á', 'f': '“ì', 'g': '…¢', 'h': ' ú', 'i': '…™', 'j': '·¥ä',
    'k': '·¥ã', 'l': ' ü', 'm': '·¥ç', 'n': '…¥', 'o': '·¥è', 'p': '·¥ò', 'q': '«´', 'r': ' Ä', 's': '—ï', 't': '·¥õ',
    'u': '·¥ú', 'v': '·¥†', 'w': '·¥°', 'x': '—Ö', 'y': ' è', 'z': '·¥¢'
  };
  return text.split('').map(char => smallCapsMap[char] || char).join('');
};

const toUpscript = (text: string): string => {
  const upscriptMap: { [key: string]: string } = {
    'A': '·¥¨', 'B': '·¥Æ', 'C': '·∂ú', 'D': '·¥∞', 'E': '·¥±', 'F': '·∂†', 'G': '·¥≥', 'H': '·¥¥', 'I': '·¥µ', 'J': '·¥∂',
    'K': '·¥∑', 'L': '·¥∏', 'M': '·¥π', 'N': '·¥∫', 'O': '·¥º', 'P': '·¥æ', 'Q': 'Q', 'R': '·¥ø', 'S': 'À¢', 'T': '·µÄ',
    'U': '·µÅ', 'V': '‚±Ω', 'W': '·µÇ', 'X': 'À£', 'Y': ' ∏', 'Z': '·∂ª',
    'a': '·µÉ', 'b': '·µá', 'c': '·∂ú', 'd': '·µà', 'e': '·µâ', 'f': '·∂†', 'g': '·µç', 'h': ' ∞', 'i': '‚Å±', 'j': ' ≤',
    'k': '·µè', 'l': 'À°', 'm': '·µê', 'n': '‚Åø', 'o': '·µí', 'p': '·µñ', 'q': 'q', 'r': ' ≥', 's': 'À¢', 't': '·µó',
    'u': '·µò', 'v': '·µõ', 'w': ' ∑', 'x': 'À£', 'y': ' ∏', 'z': '·∂ª'
  };
  return text.split('').map(char => upscriptMap[char] || char).join('');
};

const toSubscript = (text: string): string => {
  const subscriptMap: { [key: string]: string } = {
    'A': '‚Çê', 'B': '·µ¶', 'C': '·∂ú', 'D': '·µà', 'E': '‚Çë', 'F': '·∂†', 'G': '·µç', 'H': '‚Çï', 'I': '·µ¢', 'J': '‚±º',
    'K': '‚Çñ', 'L': '‚Çó', 'M': '‚Çò', 'N': '‚Çô', 'O': '‚Çí', 'P': '‚Çö', 'Q': 'Q', 'R': '·µ£', 'S': '‚Çõ', 'T': '‚Çú',
    'U': '·µ§', 'V': '·µ•', 'W': 'w', 'X': '‚Çì', 'Y': 'Y', 'Z': 'Z',
    'a': '‚Çê', 'b': '·µ¶', 'c': '·∂ú', 'd': '·µà', 'e': '‚Çë', 'f': '·∂†', 'g': '·µç', 'h': '‚Çï', 'i': '·µ¢', 'j': '‚±º',
    'k': '‚Çñ', 'l': '‚Çó', 'm': '‚Çò', 'n': '‚Çô', 'o': '‚Çí', 'p': '‚Çö', 'q': 'q', 'r': '·µ£', 's': '‚Çõ', 't': '‚Çú',
    'u': '·µ§', 'v': '·µ•', 'w': 'w', 'x': '‚Çì', 'y': 'y', 'z': 'z'
  };
  return text.split('').map(char => subscriptMap[char] || char).join('');
};

const toCircled = (text: string): string => {
  const circledMap: { [key: string]: string } = {
    'A': '‚í∂', 'B': '‚í∑', 'C': '‚í∏', 'D': '‚íπ', 'E': '‚í∫', 'F': '‚íª', 'G': '‚íº', 'H': '‚íΩ', 'I': '‚íæ', 'J': '‚íø',
    'K': '‚ìÄ', 'L': '‚ìÅ', 'M': '‚ìÇ', 'N': '‚ìÉ', 'O': '‚ìÑ', 'P': '‚ìÖ', 'Q': '‚ìÜ', 'R': '‚ìá', 'S': '‚ìà', 'T': '‚ìâ',
    'U': '‚ìä', 'V': '‚ìã', 'W': '‚ìå', 'X': '‚ìç', 'Y': '‚ìé', 'Z': '‚ìè',
    'a': '‚ìê', 'b': '‚ìë', 'c': '‚ìí', 'd': '‚ìì', 'e': '‚ìî', 'f': '‚ìï', 'g': '‚ìñ', 'h': '‚ìó', 'i': '‚ìò', 'j': '‚ìô',
    'k': '‚ìö', 'l': '‚ìõ', 'm': '‚ìú', 'n': '‚ìù', 'o': '‚ìû', 'p': '‚ìü', 'q': '‚ì†', 'r': '‚ì°', 's': '‚ì¢', 't': '‚ì£',
    'u': '‚ì§', 'v': '‚ì•', 'w': '‚ì¶', 'x': '‚ìß', 'y': '‚ì®', 'z': '‚ì©'
  };
  return text.split('').map(char => circledMap[char] || char).join('');
};

const toSquared = (text: string): string => {
  const squaredMap: { [key: string]: string } = {
    'A': 'üÖ∞', 'B': 'üÖ±', 'C': 'üÖ≤', 'D': 'üÖ≥', 'E': 'üÖ¥', 'F': 'üÖµ', 'G': 'üÖ∂', 'H': 'üÖ∑', 'I': 'üÖ∏', 'J': 'üÖπ',
    'K': 'üÖ∫', 'L': 'üÖª', 'M': 'üÖº', 'N': 'üÖΩ', 'O': 'üÖæ', 'P': 'üÖø', 'Q': 'üÜÄ', 'R': 'üÜÅ', 'S': 'üÜÇ', 'T': 'üÜÉ',
    'U': 'üÜÑ', 'V': 'üÜÖ', 'W': 'üÜÜ', 'X': 'üÜá', 'Y': 'üÜà', 'Z': 'üÜâ',
    'a': 'üÖ∞', 'b': 'üÖ±', 'c': 'üÖ≤', 'd': 'üÖ≥', 'e': 'üÖ¥', 'f': 'üÖµ', 'g': 'üÖ∂', 'h': 'üÖ∑', 'i': 'üÖ∏', 'j': 'üÖπ',
    'k': 'üÖ∫', 'l': 'üÖª', 'm': 'üÖº', 'n': 'üÖΩ', 'o': 'üÖæ', 'p': 'üÖø', 'q': 'üÜÄ', 'r': 'üÜÅ', 's': 'üÜÇ', 't': 'üÜÉ',
    'u': 'üÜÑ', 'v': 'üÜÖ', 'w': 'üÜÜ', 'x': 'üÜá', 'y': 'üÜà', 'z': 'üÜâ'
  };
  return text.split('').map(char => squaredMap[char] || char).join('');
};

const toNegativeCircled = (text: string): string => {
  const negativeCircledMap: { [key: string]: string } = {
    'A': 'üÖê', 'B': 'üÖë', 'C': 'üÖí', 'D': 'üÖì', 'E': 'üÖî', 'F': 'üÖï', 'G': 'üÖñ', 'H': 'üÖó', 'I': 'üÖò', 'J': 'üÖô',
    'K': 'üÖö', 'L': 'üÖõ', 'M': 'üÖú', 'N': 'üÖù', 'O': 'üÖû', 'P': 'üÖü', 'Q': 'üÖ†', 'R': 'üÖ°', 'S': 'üÖ¢', 'T': 'üÖ£',
    'U': 'üÖ§', 'V': 'üÖ•', 'W': 'üÖ¶', 'X': 'üÖß', 'Y': 'üÖ®', 'Z': 'üÖ©',
    'a': 'üÖê', 'b': 'üÖë', 'c': 'üÖí', 'd': 'üÖì', 'e': 'üÖî', 'f': 'üÖï', 'g': 'üÖñ', 'h': 'üÖó', 'i': 'üÖò', 'j': 'üÖô',
    'k': 'üÖö', 'l': 'üÖõ', 'm': 'üÖú', 'n': 'üÖù', 'o': 'üÖû', 'p': 'üÖü', 'q': 'üÖ†', 'r': 'üÖ°', 's': 'üÖ¢', 't': 'üÖ£',
    'u': 'üÖ§', 'v': 'üÖ•', 'w': 'üÖ¶', 'x': 'üÖß', 'y': 'üÖ®', 'z': 'üÖ©'
  };
  return text.split('').map(char => negativeCircledMap[char] || char).join('');
};

// Special decorative functions
const toWideText = (text: string): string => {
  return text.split('').join('„ÄÄ');
};

const toUpsideDown = (text: string): string => {
  const upsideDownMap: { [key: string]: string } = {
    'A': '‚àÄ', 'B': '·ó∫', 'C': '∆Ü', 'D': '·ó°', 'E': '∆é', 'F': '·ñ¥', 'G': '◊§', 'H': 'H', 'I': 'I', 'J': '≈ø',
    'K': ' û', 'L': 'À•', 'M': 'W', 'N': 'N', 'O': 'O', 'P': '‘Ä', 'Q': 'Q', 'R': '·¥ø', 'S': 'S', 'T': '‚î¥',
    'U': '‚à©', 'V': 'Œõ', 'W': 'M', 'X': 'X', 'Y': '‚ÖÑ', 'Z': 'Z',
    'a': '…ê', 'b': 'q', 'c': '…î', 'd': 'p', 'e': '«ù', 'f': '…ü', 'g': '∆É', 'h': '…•', 'i': '·¥â', 'j': '…æ',
    'k': ' û', 'l': 'l', 'm': '…Ø', 'n': 'u', 'o': 'o', 'p': 'd', 'q': 'b', 'r': '…π', 's': 's', 't': ' á',
    'u': 'n', 'v': ' å', 'w': ' ç', 'x': 'x', 'y': ' é', 'z': 'z'
  };
  return text.split('').map(char => upsideDownMap[char] || char).reverse().join('');
};

const addSpacing = (text: string, spacing: string): string => {
  return text.split('').join(spacing);
};

export const fontStyles: FontStyle[] = [
  // Bold Unicode variations
  { name: 'Mathematical Bold', category: 'Bold', transform: toBold },
  { name: 'Sans-Serif Bold', category: 'Bold', transform: toSansSerifBold },
  { name: 'Bold Fraktur', category: 'Bold', transform: (text) => toBoldScript(text), fontWeight: 'bold' },
  
  // Italic variations
  { name: 'Mathematical Italic', category: 'Italic', transform: toItalic },
  { name: 'Bold Italic', category: 'Italic', transform: toBoldItalic },
  
  // Script variations
  { name: 'Script', category: 'Script', transform: toScript },
  { name: 'Bold Script', category: 'Script', transform: toBoldScript },
  
  // Decorative variations
  { name: 'Fraktur', category: 'Decorative', transform: toFraktur },
  { name: 'Double-Struck', category: 'Decorative', transform: toDoubleStruck },
  { name: 'Monospace', category: 'Monospace', transform: toMonospace },
  
  // Special styles
  { name: 'Small Caps', category: 'Creative', transform: toSmallCaps },
  { name: 'Superscript', category: 'Creative', transform: toUpscript },
  { name: 'Subscript', category: 'Creative', transform: toSubscript },
  { name: 'Circled', category: 'Decorative', transform: toCircled },
  { name: 'Squared', category: 'Decorative', transform: toSquared },
  { name: 'Negative Circled', category: 'Decorative', transform: toNegativeCircled },
  
  // Spacing and effects
  { name: 'Wide Text', category: 'Creative', transform: toWideText },
  { name: 'Upside Down', category: 'Creative', transform: toUpsideDown },
  { name: 'Spaced Out', category: 'Creative', transform: (text) => addSpacing(text, ' ') },
  { name: 'Dotted Spacing', category: 'Creative', transform: (text) => addSpacing(text, '¬∑') },
  { name: 'Star Spacing', category: 'Creative', transform: (text) => addSpacing(text, '‚òÖ') },
  
  // CSS-based font styles
  { name: 'Ultra Bold', category: 'Bold', transform: (text) => text, fontWeight: '900' },
  { name: 'Heavy Weight', category: 'Bold', transform: (text) => text, fontWeight: '800' },
  { name: 'Bold Serif', category: 'Bold', transform: (text) => text, fontFamily: 'serif', fontWeight: 'bold' },
  { name: 'Bold Sans-Serif', category: 'Bold', transform: (text) => text, fontFamily: 'sans-serif', fontWeight: 'bold' },
  { name: 'Bold Italic Serif', category: 'Bold', transform: (text) => text, fontFamily: 'serif', fontWeight: 'bold', fontStyle: 'italic' },
  
  { name: 'Elegant Italic', category: 'Italic', transform: (text) => text, fontStyle: 'italic', fontFamily: 'serif' },
  { name: 'Modern Italic', category: 'Italic', transform: (text) => text, fontStyle: 'italic', fontFamily: 'sans-serif' },
  { name: 'Light Italic', category: 'Italic', transform: (text) => text, fontStyle: 'italic', fontWeight: '300' },
  
  { name: 'Code Style', category: 'Monospace', transform: (text) => text, fontFamily: 'monospace' },
  { name: 'Terminal', category: 'Monospace', transform: (text) => text, fontFamily: 'Courier New, monospace', color: '#00ff00' },
  { name: 'Bold Code', category: 'Monospace', transform: (text) => text, fontFamily: 'monospace', fontWeight: 'bold' },
  
  // Text effects with CSS
  { name: 'Shadow Bold', category: 'Bold', transform: (text) => text, fontWeight: 'bold', textShadow: '2px 2px 4px rgba(0,0,0,0.3)' },
  { name: 'Glowing Text', category: 'Creative', transform: (text) => text, textShadow: '0 0 10px #ff6b6b, 0 0 20px #ff6b6b, 0 0 30px #ff6b6b' },
  { name: 'Neon Blue', category: 'Creative', transform: (text) => text, color: '#00ffff', textShadow: '0 0 5px #00ffff, 0 0 10px #00ffff, 0 0 15px #00ffff' },
  { name: 'Fire Text', category: 'Creative', transform: (text) => text, color: '#ff4500', textShadow: '0 0 5px #ff4500, 0 0 10px #ff6500, 0 0 15px #ff8500' },
  { name: 'Ice Text', category: 'Creative', transform: (text) => text, color: '#87ceeb', textShadow: '0 0 5px #87ceeb, 0 0 10px #b0e0e6, 0 0 15px #e0f6ff' },
  
  { name: 'Underlined Bold', category: 'Bold', transform: (text) => text, fontWeight: 'bold', textDecoration: 'underline' },
  { name: 'Strike Through', category: 'Decorative', transform: (text) => text, textDecoration: 'line-through' },
  { name: 'Overline', category: 'Decorative', transform: (text) => text, textDecoration: 'overline' },
  
  // Gradient text effects
  { name: 'Purple Gradient', category: 'Creative', transform: (text) => text, background: 'linear-gradient(45deg, #667eea 0%, #764ba2 100%)' },
  { name: 'Ocean Gradient', category: 'Creative', transform: (text) => text, background: 'linear-gradient(45deg, #2196F3 0%, #21CBF3 100%)' },
  { name: 'Sunset Gradient', category: 'Creative', transform: (text) => text, background: 'linear-gradient(45deg, #f093fb 0%, #f5576c 100%)' },
  { name: 'Forest Gradient', category: 'Creative', transform: (text) => text, background: 'linear-gradient(45deg, #56ab2f 0%, #a8e6cf 100%)' },
  { name: 'Gold Gradient', category: 'Creative', transform: (text) => text, background: 'linear-gradient(45deg, #f7971e 0%, #ffd200 100%)' },
  
  // Size variations
  { name: 'Large Bold', category: 'Bold', transform: (text) => text, fontWeight: 'bold', fontSize: '24px' },
  { name: 'Extra Large', category: 'Bold', transform: (text) => text, fontWeight: 'bold', fontSize: '28px' },
  { name: 'Small Caps Bold', category: 'Bold', transform: (text) => text.toUpperCase(), fontWeight: 'bold', fontSize: '14px' },
  
  // Color variations
  { name: 'Red Bold', category: 'Bold', transform: (text) => text, fontWeight: 'bold', color: '#dc3545' },
  { name: 'Blue Bold', category: 'Bold', transform: (text) => text, fontWeight: 'bold', color: '#007bff' },
  { name: 'Green Bold', category: 'Bold', transform: (text) => text, fontWeight: 'bold', color: '#28a745' },
  { name: 'Purple Bold', category: 'Bold', transform: (text) => text, fontWeight: 'bold', color: '#6f42c1' },
  { name: 'Orange Bold', category: 'Bold', transform: (text) => text, fontWeight: 'bold', color: '#fd7e14' },
  
  // Special Unicode decorations
  { name: 'Dotted Border', category: 'Decorative', transform: (text) => `¬∑‚Ä¢¬∞${text}¬∞‚Ä¢¬∑` },
  { name: 'Star Border', category: 'Decorative', transform: (text) => `‚òÖ‚òÜ${text}‚òÜ‚òÖ` },
  { name: 'Arrow Border', category: 'Decorative', transform: (text) => `‚Üí${text}‚Üê` },
  { name: 'Diamond Border', category: 'Decorative', transform: (text) => `‚óÜ${text}‚óÜ` },
  { name: 'Heart Border', category: 'Decorative', transform: (text) => `‚ô°${text}‚ô°` },
  { name: 'Crown Style', category: 'Decorative', transform: (text) => `‚ôî${text}‚ôî` },
  { name: 'Musical Notes', category: 'Decorative', transform: (text) => `‚ô™${text}‚ô™` },
  { name: 'Flower Border', category: 'Decorative', transform: (text) => `‚ùÄ${text}‚ùÄ` },
  { name: 'Lightning Style', category: 'Decorative', transform: (text) => `‚ö°${text}‚ö°` },
  { name: 'Sparkles', category: 'Decorative', transform: (text) => `‚ú®${text}‚ú®` }
];